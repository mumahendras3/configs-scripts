#!/bin/sh -e

# Check for root permission
[ $(id -u) -ne 0 ] && echo "Run $0 as root!" && exit 1

# Check for arguments
[ $# -le 0 ] && echo "Pass directories as arguments!" && exit 1

# Where the resulting packages will be placed
export OUTPUT=${OUTPUT:-/tmp}

# Defining some functions
download_and_verfiy() {
    for dl_url in $1; do
        FILE_NAME=$(basename "$dl_url")
        [ -n "$REDOWNLOAD" ] && rm -f "$FILE_NAME"
        [ ! -s "$FILE_NAME" ] && wget -nv --show-progress --continue "$dl_url"
        DL_SUMS="${DL_SUMS}$(md5sum "$FILE_NAME" | cut -d" " -f1)"
    done
    for sum in $2; do
        SUMS="${SUMS}$sum"
    done
    if [ "$DL_SUMS" != "$SUMS" ]; then
        printf "MD5 sum mismatch found. "
        unset REPLY
        while [ -z "$REPLY" ]; do
            printf "Redownload the source files? [y|N] "
            read REPLY
            case "$REPLY" in
                n|N)
                    echo "Aborting..."
                    exit 1
                    ;;
                Y|y)
                    REDOWNLOAD=1
                    download_and_verfiy "$1" "$2"
                    ;;
                *)
                    echo "Valid replies: Y|y, N|n"
                    unset REPLY
                    ;;
            esac
        done
    fi
}

# Some environment variable exports
export MAKEFLAGS="${MAKEFLAGS:--j$(nproc)}"
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# Give the user some time to cancel
WAIT=${WAIT:-10}
echo Packages to build: "$(basename -a "$@" | tr '\n' ' ')"
echo MAKEFLAGS is set to: "$MAKEFLAGS"
if [ "$WAIT" -gt 0 ]; then
    printf "Continuing in: "
    for i in $(seq -s " " "$WAIT" -1 1); do
        printf '%s ' "$i"
        sleep 1
    done
    echo
fi

# Start main loop
for dir in "$@"; do
    (
        cd "$dir"
        . ./*.info
        # Downloading the source files if needed
        if [ "$ARCH" = i586 ] && [ "$DOWNLOAD" = UNSUPPORTED ] || \
            [ "$ARCH" = x86_64 ] && [ "$DOWNLOAD_x86_64" = UNSUPPORTED ]; then
            echo "${PRGNAM}: $ARCH is unsupported"
            exit 1
        fi
        if [ "$ARCH" = x86_64 ] && [ -n "$DOWNLOAD_x86_64" ]; then
            download_and_verfiy "$DOWNLOAD_x86_64" "$MD5SUM_x86_64"
        else
            download_and_verfiy "$DOWNLOAD" "$MD5SUM"
        fi
        # Run the SlackBuild script
        bash "${PRGNAM}.SlackBuild"
        # Install the built package if requested
        if [ "${INSTALL_PKG:-n}" != n ]; then
            upgradepkg --reinstall --install-new \
                "${OUTPUT}/$(PRINT_PACKAGE_NAME=1 bash "${PRGNAM}.SlackBuild")"
        fi
    )
done
