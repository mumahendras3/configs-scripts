#!/bin/sh -e

# Check for arguments
[ $# -le 0 ] && echo "Pass directories as arguments!" && exit 1

# Extract the <username>/<reponame> part of a GitHub download link
# Usage: github_get_user_repo_name <github download link>
# Exit code: 1 if no matches found
github_get_user_repo_name() {
    echo "$1" | \
        sed -En \
            -e '\|https://.*github.com/[^/]+/[^/]+/.*| !q1' \
            -e 's|https://.*github.com/([^/]+)/([^/]+)/.*|\1/\2|p'
}

# Get the latest release for software on GitHub
# Usage: github_get_latest_release <username>/<reponame>
github_get_latest_release() {
    wget -qO- "https://api.github.com/repos/$1/releases/latest" | \
        grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'
}

# Get the latest release for software on skarnet.org
# Usage: skarnet_get_latest_release <skarnet.org download link>
skarnet_get_latest_release() {
    wget -qO- "$(dirname "$1")/" | \
        sed -En \
            -e "\|.*<a href=\"${PRGNAM}-.*\.tar\.gz\">(.+)</a>.*| !d" \
            -e "s|.*<a.*>(.+)</a>.*|\1|p"
}

# Get the latest release for software on gnome.org
# Usage: gnome_get_latest_release <gnome.org software name>
gnome_get_latest_release() (
    MAJOR=$(
        wget -qO- "https://download.gnome.org/sources/${1}/" | \
            sed -En 's|.*>([0-9.]+)/<.*|\1|p' | \
            sort -V | \
            tail -n1
    )
    wget -qO- "https://download.gnome.org/sources/${1}/${MAJOR}/" | \
        sed -En 's|.*>LATEST-IS-([0-9.]+)<.*|\1|p'
)

# TODO: Use the command pipeline below to create gitlab_get_latest_release() and
# perhaps refactor github_get_latest_release() to also use it
# git ls-remote --refs --tags --sort=version:refname https://gitlab.com/abchk1234/openrc-services.git 'tags/[v0-9]*' | sed -E '/[^-]*-.*/d; s|.*/v?(.*)|\1|' | tail -n1

# Start the main loop
for dir in "$@"; do
    [ -d "$dir" ] || continue
    (
        cd "$dir"
        . ./*.info
        # Choose wether to use $DOWNLOAD or $DOWNLOAD_x86_64
        [ "$DOWNLOAD" = UNSUPPORTED ] && DL_URL="$DOWNLOAD_x86_64" || \
            DL_URL="$DOWNLOAD"
        # Get the latest release using the appropriate method
        if USER_REPO_NAME="$(github_get_user_repo_name "$DL_URL")"; then
            LATEST="$(github_get_latest_release "$USER_REPO_NAME")"
        elif echo "$DL_URL" | grep -Eq 'https://skarnet.org/software/.+'; then
            LATEST="$(skarnet_get_latest_release "$DL_URL")"
        # TODO: gitlab elif must be placed here (before gnome.org software)
        elif echo "$DL_URL" | grep -Eq '[a-z]+://[a-z]+\.gnome\.org/.+'; then
            LATEST="$(gnome_get_latest_release "$PRGNAM")"
        else
            echo "The download link $DL_URL is unsupported"
            exit 1
        fi
        # Update the appropriate files if there is a new release
        if [ "$VERSION" = "$LATEST" ]; then
            echo "${PRGNAM}: Up to date (${LATEST})"
        else
            echo "${PRGNAM}: ${VERSION} -> ${LATEST}"
            sed -i "s/${VERSION}/${LATEST}/g" \
                "${PRGNAM}.info" "${PRGNAM}.SlackBuild"
            echo "$DL_URL" | grep -Fq "/sources/${PRGNAM}/${VERSION%.*}/" && \
                sed -i "s/${VERSION%.*}/${LATEST%.*}/" "${PRGNAM}.info"
            . "./${PRGNAM}.info"
            # Update MD5SUM{,_x86_64}
            for dl_url in "$DOWNLOAD" "$DOWNLOAD_x86_64"; do
                if [ "$dl_url" != UNSUPPORTED ] && [ -n "$dl_url" ]; then
                    FILE_NAME="$(basename "$dl_url")"
                    [ "$dl_url" = "$DOWNLOAD" ] && OLDSUM="$MD5SUM" || \
                        OLDSUM="$MD5SUM_x86_64"
                    [ -s "$FILE_NAME" ] && echo "$FILE_NAME already exists" || \
                        wget -q --show-progress "$dl_url"
                    NEWSUM="$(md5sum "$FILE_NAME" | cut -d" " -f1)"
                    sed -i "s/${OLDSUM}/${NEWSUM}/" "${PRGNAM}.info"
                fi
            done
        fi
    )
done
